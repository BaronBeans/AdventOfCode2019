import { Assertion } from "./external/tap-parser";
declare const Component: any;
export interface TapBarkOutputState {
    logs: Array<string>;
    warnings: Array<string>;
    fixtureName?: string;
    results?: {
        pass: number;
        fail: number;
        ignore: number;
        failures: Array<Assertion>;
    };
    totalTests?: number;
    currentTest?: number;
    testName?: string;
}
export interface TapBarkOutputProps {
    showProgress: boolean;
}
declare class TapBarkOutputComponent extends Component {
    getPipeable(): any;
    private FIXTURE_REGEXP;
    private CONSOLE_WARNING_REGEXP;
    private _completeCalled;
    private state;
    constructor(props: any);
    getFailureMessage(assertion: Assertion): string;
    render(): any;
    private handleNewPlan;
    private readonly warnings;
    private handleComment;
    private handleAssert;
    private handleComplete;
    private setupListeners;
}
export declare const TapBarkOutput: new (props: TapBarkOutputProps) => any;
export declare class TapBark {
    static readonly tapParser: {
        on: (eventName: string, callback: Function) => void;
    };
    static create(showProgress?: boolean): any;
}
export { Component, TapBarkOutputComponent };
